"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[164],{4696:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>a,metadata:()=>c,toc:()=>o});var i=t(4848),r=t(8453);const a={},s="CabbageGet",c={id:"cabbage_opcodes/cabbageGet",title:"CabbageGet",description:"This opcode queries the current value of a widget property, i.e,colour, bounds.top, height, etc. It can run at init-time or k-time and includes an optional output argument that triggers a value of 1 for one k-cycle whenever the widget value is updated or changed.",source:"@site/docs/cabbage_opcodes/cabbageGet.md",sourceDirName:"cabbage_opcodes",slug:"/cabbage_opcodes/cabbageGet",permalink:"/cabbage3docs/docs/cabbage_opcodes/cabbageGet",draft:!1,unlisted:!1,editUrl:"https://github.com/rorywalsh/cabbage3docs/tree/main/docs/cabbage_opcodes/cabbageGet.md",tags:[],version:"current",frontMatter:{},sidebar:"docSidebar",previous:{title:"CabbageGetValue",permalink:"/cabbage3docs/docs/cabbage_opcodes/cabbageGetValue"},next:{title:"CabbageSet",permalink:"/cabbage3docs/docs/cabbage_opcodes/cabbageSet"}},l={},o=[{value:"Syntax",id:"syntax",level:2},{value:"Initialization",id:"initialization",level:3},{value:"Performance",id:"performance",level:3},{value:"Example:",id:"example",level:2}];function d(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"cabbageget",children:"CabbageGet"})}),"\n",(0,i.jsxs)(n.p,{children:["This opcode queries the current value of a widget property, i.e,",(0,i.jsx)(n.code,{children:"colour"}),", ",(0,i.jsx)(n.code,{children:"bounds.top"}),", ",(0,i.jsx)(n.code,{children:"height"}),", etc. It can run at init-time or k-time and includes an optional output argument that triggers a value of 1 for one k-cycle whenever the widget value is updated or changed."]}),"\n",(0,i.jsx)(n.h2,{id:"syntax",children:"Syntax"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"kValue"})," ",(0,i.jsx)(n.strong,{children:"cabbageGet"})," ",(0,i.jsx)(n.em,{children:"SChannel"}),", ",(0,i.jsx)(n.em,{children:"SProperty"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"iValue"})," ",(0,i.jsx)(n.strong,{children:"cabbageGet"})," ",(0,i.jsx)(n.em,{children:"SChannel"}),", ",(0,i.jsx)(n.em,{children:"SProperty"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"SValue"})," ",(0,i.jsx)(n.strong,{children:"cabbageGet"})," ",(0,i.jsx)(n.em,{children:"SChannel"}),", ",(0,i.jsx)(n.em,{children:"SProperty"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"kValue [, kTrig]"})," ",(0,i.jsx)(n.strong,{children:"cabbageGet"})," ",(0,i.jsx)(n.em,{children:"SChannel"}),", ",(0,i.jsx)(n.em,{children:"SProperty"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"SValue [, kTrig]"})," ",(0,i.jsx)(n.strong,{children:"cabbageGet"})," ",(0,i.jsx)(n.em,{children:"SChannel"}),", ",(0,i.jsx)(n.em,{children:"SProperty"})]}),"\n",(0,i.jsx)(n.h3,{id:"initialization",children:"Initialization"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.em,{children:"SChannel"})," \u2013 the name of the channel to query"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.em,{children:"SProperty"})," - the property you wish to access. If the property is part of a JSON object, such as ",(0,i.jsx)(n.code,{children:'"bounds:{"left":0}'}),' you can use dot notation, i.e., "bounds.left"']}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.em,{children:"iValue"})," - the current value of the widget at init-time"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"performance",children:"Performance"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.em,{children:"kValue"})," - the current value of the widget property"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.em,{children:"SValue"})," - the current string value of the widget property"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.em,{children:"kTrig"})," - a trigger signal that will return 1 for a single k-cycle whenever the value has been updated/changed"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"example",children:"Example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cs",children:'<Cabbage>[\n    {"type":"form","caption":"Simple Instrument","size":{"width":1000,"height":520},"pluginId":"RMSy"},\n    {"type":"rotarySlider", "channel":"gain", "bounds":{"left":150, "top":10, "width":100, "height":100}, "range":{"min":0, "max":2, "value":1, "skew":1, "increment":0.1}, "text":"Gain"},\n]\n</Cabbage>\n<CsoundSynthesizer>\n<CsOptions>\n-dm0 -n -+rtmidi=NULL -M0 --midi-key=4 --midi-velocity=5\n</CsOptions>\n<CsInstruments>\n; sr set by host\nksmps = 16\nnchnls = 2\n0dbfs = 1\n\ninstr 1 \n    kSliderValue, kTrig cabbageGetValue "gain"\n    //print value of \'gain\' slider each time its updated\n    printf "Value of %s widget is now %f", kTrig, kSliderValue\nendin\n\n</CsInstruments>  \n<CsScore>\ni1 0 z\n</CsScore>\n</CsoundSynthesizer>\n'})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>c});var i=t(6540);const r={},a=i.createContext(r);function s(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);